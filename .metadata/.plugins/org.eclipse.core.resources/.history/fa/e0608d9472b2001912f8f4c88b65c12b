package uci.dbh.isg.wrapper;

import uci.dbh.isg.wrapper.connectors.DexConnector;
import uci.dbh.isg.wrapper.databuilders.*;
import uci.dbh.isg.wrapper.models.*;

import java.util.ArrayList;


/**
 * Hello world!
 *
 */
public class WrapperComponent extends Thread {
	
	// this must be given somehow to the WrapperComponent from tippers
	
	private ArrayList<TWrapperHandler> wh_list = new ArrayList<TWrapperHandler>();
	private boolean operatable;
	
	public WrapperComponent() {
		this.operatable = true;
	}
	
	public void request (LLRequest request) {
		InteractionType interactionType = request.getInteractionType();

		if(interactionType.getIt() == InteractionType.REQUEST) {
			new TWrapperHandler(this).handleRequest(request);
		}
		else if(interactionType.getIt() == InteractionType.STREAMING) {
			new TWrapperHandler(this).handleStrRequest(request);
		}
		
	}

	public void request (LLCommand command) {
		new TWrapperHandler(this).handleCommand(command);
	}
	
	public void run() {
		while(operatable) {
			for ( TWrapperHandler wh : wh_list) {
				wh.doStream();
			}
		}
	}

	public void getOperatable(boolean flag) {
		this.operatable = flag;
	}
	
	public ArrayList<TWrapperHandler> getWH_List() {
		return wh_list;
	}
}

class TWrapperHandler extends WrapperHandler{
	
	private WrapperComponent wc;
	private LLRequest request;
	private long count;
	private long curTime;
	private long startTime;
	
	public TWrapperHandler(WrapperComponent wc) {	// to call streaming method constructor should be this.
		super();
		this.wc = wc;
	}
	
	@Override
	public void handleCommand(LLCommand llcommand) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void handleRequest(LLRequest request) {
		RequestBuilder reqb = new RequestBuilder(request, request.getProtocol());

		DexConnector dc = new DexConnector(request.getProtocol());
		String SensorRequest = dc.getDexprimitives().postExGet(reqb.getDestination(), reqb.getScope(), reqb.getPostMessage());
		
		ResponseBuilder resb = new ResponseBuilder(request, SensorRequest, request.getProtocol());
		request.respond(resb.getTippersMessage());
	}

	// for streaming service
	@Override
	public void handleStrRequest(LLRequest request) {
		// TODO Auto-generated method stub
		this.startTime = System.currentTimeMillis();
		this.count = 0;
		wc.getWH_List().add(this);
	}

	@Override
	public void handleStopStr(LLRequest request) {
		// TODO Auto-generated method stub
		wc.getWH_List().remove(this);
	}

	public void setRequest(LLRequest request) {
		this.request = request;
	}
	
	public void doStream() {
		curTime = System.currentTimeMillis();
		if( (curTime - startTime) < request.getDuration() ) {
			if( startTime + count*request.getFrequency() <= curTime) {
				TWrapperHandler wh = new TWrapperHandler(wc);
				wh.handleRequest(request);
			}
		}
		else {
			handleStopStr(request);
		}
		System.out.println("adsf");
	}
}
